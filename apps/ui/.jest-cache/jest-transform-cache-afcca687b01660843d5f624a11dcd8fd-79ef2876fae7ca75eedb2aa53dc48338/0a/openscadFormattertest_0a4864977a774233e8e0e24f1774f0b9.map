{"file":"/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/__tests__/openscadFormatter.test.ts","mappings":";;AAAA,4DAA0D;AAE1D,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,MAAM,KAAK,GAAG;;;6BAGW,CAAC;QAE1B,MAAM,MAAM,GAAG,IAAA,sCAAkB,EAAC,KAAK,CAAC,CAAC;QAEzC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;;;;CAIvB,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE,GAAG,EAAE;QAC7E,MAAM,KAAK,GAAG;;;;;;;;EAQhB,CAAC;QAEC,MAAM,MAAM,GAAG,IAAA,sCAAkB,EAAC,KAAK,CAAC,CAAC;QAEzC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;;;;;;;;;CASvB,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,MAAM,KAAK,GAAG;;;;WAIP,CAAC;QAER,MAAM,MAAM,GAAG,IAAA,sCAAkB,EAAC,KAAK,CAAC,CAAC;QAEzC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;;;CAGvB,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sFAAsF,EAAE,GAAG,EAAE;QAC9F,MAAM,KAAK,GAAG;;;;;;;;;EAShB,CAAC;QAEC,MAAM,MAAM,GAAG,IAAA,sCAAkB,EAAC,KAAK,CAAC,CAAC;QAEzC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;;;;;;;;;;CAUvB,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,MAAM,KAAK,GAAG;;;;;;;;;;;;EAYhB,CAAC;QAEC,MAAM,MAAM,GAAG,IAAA,sCAAkB,EAAC,KAAK,CAAC,CAAC;QAEzC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;;;;;;;;;;;;;CAavB,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iFAAiF,EAAE,GAAG,EAAE;QACzF,MAAM,KAAK,GAAG;;;;;EAKhB,CAAC;QAEC,MAAM,MAAM,GAAG,IAAA,sCAAkB,EAAC,KAAK,CAAC,CAAC;QAEzC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;;;;;;CAMvB,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/__tests__/openscadFormatter.test.ts"],"sourcesContent":["import { formatOpenScadCode } from '../openscadFormatter';\n\ndescribe('formatOpenScadCode', () => {\n  it('preserves compact angle brackets in use/include statements', () => {\n    const input = `// Import the library (modules/functions only; no top-level geometry executed)\nuse <lib/holes.scad>\nuse <lib/line.scad>\nuse <lib/spacing_utils.scad>`;\n\n    const result = formatOpenScadCode(input);\n\n    expect(result).toBe(`// Import the library (modules/functions only; no top-level geometry executed)\nuse <lib/holes.scad>\nuse <lib/line.scad>\nuse <lib/spacing_utils.scad>\n`);\n  });\n\n  it('normalizes spacing for conditional blocks while preserving comments', () => {\n    const input = `module example(){// leading comment\nif(true){// first branch\ncube(1);\n}else if(false){/* keep block */cube(2);\n}else{\n// final branch\ncube(3);\n}\n}`;\n\n    const result = formatOpenScadCode(input);\n\n    expect(result).toBe(`module example() {// leading comment\n    if (true) {// first branch\n        cube(1);\n    } else if (false) {/* keep block */cube(2);\n    } else {\n        // final branch\n        cube(3);\n    }\n}\n`);\n  });\n\n  it('trims excessive blank lines and ensures a trailing newline', () => {\n    const input = `cube(1);\n\n\n\nsphere(2);`;\n\n    const result = formatOpenScadCode(input);\n\n    expect(result).toBe(`cube(1);\n\nsphere(2);\n`);\n  });\n\n  it('formats comparison and assignment operators without splitting multi-character tokens', () => {\n    const input = `module metrics(){\nif(total<=limit){\nvalue+=1;\n}else if(total>=limit){\nvalue-=2;\n}\nif(value!=baseline){\nreturn value==baseline;\n}\n}`;\n\n    const result = formatOpenScadCode(input);\n\n    expect(result).toBe(`module metrics() {\n    if (total <= limit) {\n        value += 1;\n    } else if (total >= limit) {\n        value -= 2;\n    }\n    if (value != baseline) {\n        return value == baseline;\n    }\n}\n`);\n  });\n\n  it('indents nested control flow and loops inside modules', () => {\n    const input = `module tree(levels){\nfor(level=[0:levels-1]){\nif(level==0){\ncube([1,1,1]);\n}else{\ntranslate([0,0,level]){\nrotate([0,0,45]){\ncylinder(h=level+1,r=level/2);\n}\n}\n}\n}\n}`;\n\n    const result = formatOpenScadCode(input);\n\n    expect(result).toBe(`module tree(levels) {\n    for (level = [0:levels - 1]) {\n        if (level == 0) {\n            cube([1, 1, 1]);\n        } else {\n            translate([0, 0, level]) {\n                rotate([0, 0, 45]) {\n                    cylinder(h = level + 1, r = level / 2);\n                }\n            }\n        }\n    }\n}\n`);\n  });\n\n  it('does not treat import-like content inside strings or comments as actual imports', () => {\n    const input = `// Example mentioning use <fake.scad> should stay intact\necho(\"use <fake.scad> inside string\");\n/* include <fake.scad> */\nmodule noop(){\nreturn;\n}`;\n\n    const result = formatOpenScadCode(input);\n\n    expect(result).toBe(`// Example mentioning use <fake.scad> should stay intact\necho(\"use <fake.scad> inside string\");\n/* include <fake.scad> */\nmodule noop() {\n    return;\n}\n`);\n  });\n});\n"],"version":3}