3bb994f7005dbf3ea8d8b925e1d83383
"use strict";
/**
 * Debug test file - minimal test for quick iteration
 */
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
// Increase timeout for WASM initialization
jest.setTimeout(30000);
describe('Debug Formatter Tests', () => {
    beforeAll(async () => {
        await (0, index_1.initFormatter)();
    });
    it('should be idempotent - if-else without braces', async () => {
        const input = `if (a) cube(1); else sphere(2);`;
        const once = await (0, index_1.formatOpenScadCode)(input);
        const twice = await (0, index_1.formatOpenScadCode)(once);
        console.log('\n=== IDEMPOTENCE DEBUG ===');
        console.log('Input:', JSON.stringify(input));
        console.log('Once:', JSON.stringify(once));
        console.log('Twice:', JSON.stringify(twice));
        const onceLines = once.split('\n');
        const twiceLines = twice.split('\n');
        console.log('\n=== LINE COMPARISON ===');
        const maxLines = Math.max(onceLines.length, twiceLines.length);
        for (let i = 0; i < maxLines; i++) {
            if (onceLines[i] !== twiceLines[i]) {
                console.log(`Line ${i + 1} DIFFERS:`);
                console.log(`  Once:  ${JSON.stringify(onceLines[i] || '(missing)')}`);
                console.log(`  Twice: ${JSON.stringify(twiceLines[i] || '(missing)')}`);
            }
        }
        expect(twice).toBe(once);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3phY2hhcnltYXJpb24vc3JjL29wZW5zY2FkLXRhdXJpL2FwcHMvdWkvc3JjL3V0aWxzL2Zvcm1hdHRlci9fX3Rlc3RzX18vZGVidWcudGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsb0NBQTZEO0FBRTdELDJDQUEyQztBQUMzQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXZCLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7SUFDckMsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE1BQU0sSUFBQSxxQkFBYSxHQUFFLENBQUM7SUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsK0NBQStDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDN0QsTUFBTSxLQUFLLEdBQUcsaUNBQWlDLENBQUM7UUFFaEQsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFBLDBCQUFrQixFQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBQSwwQkFBa0IsRUFBQyxJQUFJLENBQUMsQ0FBQztRQUU3QyxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFN0MsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUN6QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9ELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNsQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN2RSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzFFLENBQUM7UUFDSCxDQUFDO1FBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy96YWNoYXJ5bWFyaW9uL3NyYy9vcGVuc2NhZC10YXVyaS9hcHBzL3VpL3NyYy91dGlscy9mb3JtYXR0ZXIvX190ZXN0c19fL2RlYnVnLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEZWJ1ZyB0ZXN0IGZpbGUgLSBtaW5pbWFsIHRlc3QgZm9yIHF1aWNrIGl0ZXJhdGlvblxuICovXG5cbmltcG9ydCB7IGZvcm1hdE9wZW5TY2FkQ29kZSwgaW5pdEZvcm1hdHRlciB9IGZyb20gJy4uL2luZGV4JztcblxuLy8gSW5jcmVhc2UgdGltZW91dCBmb3IgV0FTTSBpbml0aWFsaXphdGlvblxuamVzdC5zZXRUaW1lb3V0KDMwMDAwKTtcblxuZGVzY3JpYmUoJ0RlYnVnIEZvcm1hdHRlciBUZXN0cycsICgpID0+IHtcbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBpbml0Rm9ybWF0dGVyKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgaWRlbXBvdGVudCAtIGlmLWVsc2Ugd2l0aG91dCBicmFjZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBgaWYgKGEpIGN1YmUoMSk7IGVsc2Ugc3BoZXJlKDIpO2A7XG5cbiAgICBjb25zdCBvbmNlID0gYXdhaXQgZm9ybWF0T3BlblNjYWRDb2RlKGlucHV0KTtcbiAgICBjb25zdCB0d2ljZSA9IGF3YWl0IGZvcm1hdE9wZW5TY2FkQ29kZShvbmNlKTtcblxuICAgIGNvbnNvbGUubG9nKCdcXG49PT0gSURFTVBPVEVOQ0UgREVCVUcgPT09Jyk7XG4gICAgY29uc29sZS5sb2coJ0lucHV0OicsIEpTT04uc3RyaW5naWZ5KGlucHV0KSk7XG4gICAgY29uc29sZS5sb2coJ09uY2U6JywgSlNPTi5zdHJpbmdpZnkob25jZSkpO1xuICAgIGNvbnNvbGUubG9nKCdUd2ljZTonLCBKU09OLnN0cmluZ2lmeSh0d2ljZSkpO1xuXG4gICAgY29uc3Qgb25jZUxpbmVzID0gb25jZS5zcGxpdCgnXFxuJyk7XG4gICAgY29uc3QgdHdpY2VMaW5lcyA9IHR3aWNlLnNwbGl0KCdcXG4nKTtcblxuICAgIGNvbnNvbGUubG9nKCdcXG49PT0gTElORSBDT01QQVJJU09OID09PScpO1xuICAgIGNvbnN0IG1heExpbmVzID0gTWF0aC5tYXgob25jZUxpbmVzLmxlbmd0aCwgdHdpY2VMaW5lcy5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4TGluZXM7IGkrKykge1xuICAgICAgaWYgKG9uY2VMaW5lc1tpXSAhPT0gdHdpY2VMaW5lc1tpXSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgTGluZSAke2kgKyAxfSBESUZGRVJTOmApO1xuICAgICAgICBjb25zb2xlLmxvZyhgICBPbmNlOiAgJHtKU09OLnN0cmluZ2lmeShvbmNlTGluZXNbaV0gfHwgJyhtaXNzaW5nKScpfWApO1xuICAgICAgICBjb25zb2xlLmxvZyhgICBUd2ljZTogJHtKU09OLnN0cmluZ2lmeSh0d2ljZUxpbmVzW2ldIHx8ICcobWlzc2luZyknKX1gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBleHBlY3QodHdpY2UpLnRvQmUob25jZSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=