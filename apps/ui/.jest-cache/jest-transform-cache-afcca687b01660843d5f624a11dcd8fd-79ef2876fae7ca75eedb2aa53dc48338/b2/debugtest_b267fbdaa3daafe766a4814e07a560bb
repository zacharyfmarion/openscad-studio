996f4fc8221a85d9771cea7f364f6a7b
"use strict";
/**
 * Debug test file - minimal test for quick iteration
 */
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
// Increase timeout for WASM initialization
jest.setTimeout(30000);
describe('Debug Formatter Tests', () => {
    beforeAll(async () => {
        await (0, index_1.initFormatter)();
    });
    it('should be idempotent - module without braces', async () => {
        const input = `module line() cylinder(r=1);

scale(0.5) {
    cube(10);
}`;
        const once = await (0, index_1.formatOpenScadCode)(input);
        const twice = await (0, index_1.formatOpenScadCode)(once);
        console.log('\n=== IDEMPOTENCE DEBUG ===');
        console.log('Input:', JSON.stringify(input));
        console.log('Once:', JSON.stringify(once));
        console.log('Twice:', JSON.stringify(twice));
        const onceLines = once.split('\n');
        const twiceLines = twice.split('\n');
        console.log('\n=== LINE COMPARISON ===');
        const maxLines = Math.max(onceLines.length, twiceLines.length);
        for (let i = 0; i < maxLines; i++) {
            if (onceLines[i] !== twiceLines[i]) {
                console.log(`Line ${i + 1} DIFFERS:`);
                console.log(`  Once:  ${JSON.stringify(onceLines[i] || '(missing)')}`);
                console.log(`  Twice: ${JSON.stringify(twiceLines[i] || '(missing)')}`);
            }
        }
        expect(twice).toBe(once);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3phY2hhcnltYXJpb24vc3JjL29wZW5zY2FkLXRhdXJpL2FwcHMvdWkvc3JjL3V0aWxzL2Zvcm1hdHRlci9fX3Rlc3RzX18vZGVidWcudGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsb0NBQTZEO0FBRTdELDJDQUEyQztBQUMzQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXZCLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7SUFDckMsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE1BQU0sSUFBQSxxQkFBYSxHQUFFLENBQUM7SUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsOENBQThDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDNUQsTUFBTSxLQUFLLEdBQUc7Ozs7RUFJaEIsQ0FBQztRQUVDLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBQSwwQkFBa0IsRUFBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUEsMEJBQWtCLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFFN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM3QyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRTdDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVyQyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDekMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDbEMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDdkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxRSxDQUFDO1FBQ0gsQ0FBQztRQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvemFjaGFyeW1hcmlvbi9zcmMvb3BlbnNjYWQtdGF1cmkvYXBwcy91aS9zcmMvdXRpbHMvZm9ybWF0dGVyL19fdGVzdHNfXy9kZWJ1Zy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGVidWcgdGVzdCBmaWxlIC0gbWluaW1hbCB0ZXN0IGZvciBxdWljayBpdGVyYXRpb25cbiAqL1xuXG5pbXBvcnQgeyBmb3JtYXRPcGVuU2NhZENvZGUsIGluaXRGb3JtYXR0ZXIgfSBmcm9tICcuLi9pbmRleCc7XG5cbi8vIEluY3JlYXNlIHRpbWVvdXQgZm9yIFdBU00gaW5pdGlhbGl6YXRpb25cbmplc3Quc2V0VGltZW91dCgzMDAwMCk7XG5cbmRlc2NyaWJlKCdEZWJ1ZyBGb3JtYXR0ZXIgVGVzdHMnLCAoKSA9PiB7XG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgaW5pdEZvcm1hdHRlcigpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGlkZW1wb3RlbnQgLSBtb2R1bGUgd2l0aG91dCBicmFjZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBgbW9kdWxlIGxpbmUoKSBjeWxpbmRlcihyPTEpO1xuXG5zY2FsZSgwLjUpIHtcbiAgICBjdWJlKDEwKTtcbn1gO1xuXG4gICAgY29uc3Qgb25jZSA9IGF3YWl0IGZvcm1hdE9wZW5TY2FkQ29kZShpbnB1dCk7XG4gICAgY29uc3QgdHdpY2UgPSBhd2FpdCBmb3JtYXRPcGVuU2NhZENvZGUob25jZSk7XG5cbiAgICBjb25zb2xlLmxvZygnXFxuPT09IElERU1QT1RFTkNFIERFQlVHID09PScpO1xuICAgIGNvbnNvbGUubG9nKCdJbnB1dDonLCBKU09OLnN0cmluZ2lmeShpbnB1dCkpO1xuICAgIGNvbnNvbGUubG9nKCdPbmNlOicsIEpTT04uc3RyaW5naWZ5KG9uY2UpKTtcbiAgICBjb25zb2xlLmxvZygnVHdpY2U6JywgSlNPTi5zdHJpbmdpZnkodHdpY2UpKTtcblxuICAgIGNvbnN0IG9uY2VMaW5lcyA9IG9uY2Uuc3BsaXQoJ1xcbicpO1xuICAgIGNvbnN0IHR3aWNlTGluZXMgPSB0d2ljZS5zcGxpdCgnXFxuJyk7XG5cbiAgICBjb25zb2xlLmxvZygnXFxuPT09IExJTkUgQ09NUEFSSVNPTiA9PT0nKTtcbiAgICBjb25zdCBtYXhMaW5lcyA9IE1hdGgubWF4KG9uY2VMaW5lcy5sZW5ndGgsIHR3aWNlTGluZXMubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heExpbmVzOyBpKyspIHtcbiAgICAgIGlmIChvbmNlTGluZXNbaV0gIT09IHR3aWNlTGluZXNbaV0pIHtcbiAgICAgICAgY29uc29sZS5sb2coYExpbmUgJHtpICsgMX0gRElGRkVSUzpgKTtcbiAgICAgICAgY29uc29sZS5sb2coYCAgT25jZTogICR7SlNPTi5zdHJpbmdpZnkob25jZUxpbmVzW2ldIHx8ICcobWlzc2luZyknKX1gKTtcbiAgICAgICAgY29uc29sZS5sb2coYCAgVHdpY2U6ICR7SlNPTi5zdHJpbmdpZnkodHdpY2VMaW5lc1tpXSB8fCAnKG1pc3NpbmcpJyl9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXhwZWN0KHR3aWNlKS50b0JlKG9uY2UpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9