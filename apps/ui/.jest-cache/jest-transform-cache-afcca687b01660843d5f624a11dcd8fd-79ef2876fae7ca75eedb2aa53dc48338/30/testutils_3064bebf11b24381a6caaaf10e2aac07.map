{"file":"/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/formatter/__tests__/test-utils.ts","mappings":"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","names":[],"sources":["/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/formatter/__tests__/test-utils.ts"],"sourcesContent":["/**\n * Test utilities for formatter tests\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Read a test fixture file\n */\nexport function readFixture(fixturePath: string): string {\n  const fullPath = path.join(__dirname, 'fixtures', fixturePath);\n  return fs.readFileSync(fullPath, 'utf-8');\n}\n\n/**\n * Get all test cases in a fixtures directory\n * Returns pairs of [inputPath, expectedPath]\n */\nexport function getTestCases(fixturesDir: string): Array<{ name: string; input: string; expected: string }> {\n  const fullDir = path.join(__dirname, 'fixtures', fixturesDir);\n\n  if (!fs.existsSync(fullDir)) {\n    return [];\n  }\n\n  const files = fs.readdirSync(fullDir);\n  const testCases: Array<{ name: string; input: string; expected: string }> = [];\n\n  // Find all .scad files that don't end with .expected.scad\n  const inputFiles = files.filter(f => f.endsWith('.scad') && !f.endsWith('.expected.scad'));\n\n  for (const inputFile of inputFiles) {\n    const baseName = inputFile.replace(/\\.scad$/, '');\n    const expectedFile = `${baseName}.expected.scad`;\n\n    if (files.includes(expectedFile)) {\n      const inputPath = path.join(fullDir, inputFile);\n      const expectedPath = path.join(fullDir, expectedFile);\n\n      testCases.push({\n        name: `${fixturesDir}/${baseName}`,\n        input: fs.readFileSync(inputPath, 'utf-8'),\n        expected: fs.readFileSync(expectedPath, 'utf-8'),\n      });\n    }\n  }\n\n  return testCases;\n}\n\n/**\n * Get all test cases recursively from fixtures directory\n */\nexport function getAllTestCases(): Array<{ name: string; input: string; expected: string }> {\n  const fixturesRoot = path.join(__dirname, 'fixtures');\n\n  if (!fs.existsSync(fixturesRoot)) {\n    return [];\n  }\n\n  const testCases: Array<{ name: string; input: string; expected: string }> = [];\n\n  function scan(dir: string, relativePath: string = '') {\n    const entries = fs.readdirSync(dir, { withFileTypes: true });\n\n    for (const entry of entries) {\n      if (entry.isDirectory()) {\n        scan(path.join(dir, entry.name), path.join(relativePath, entry.name));\n      } else if (entry.isFile() && entry.name.endsWith('.scad') && !entry.name.endsWith('.expected.scad')) {\n        const baseName = entry.name.replace(/\\.scad$/, '');\n        const expectedFile = `${baseName}.expected.scad`;\n        const expectedPath = path.join(dir, expectedFile);\n\n        if (fs.existsSync(expectedPath)) {\n          const inputPath = path.join(dir, entry.name);\n          const testName = path.join(relativePath, baseName);\n\n          testCases.push({\n            name: testName,\n            input: fs.readFileSync(inputPath, 'utf-8'),\n            expected: fs.readFileSync(expectedPath, 'utf-8'),\n          });\n        }\n      }\n    }\n  }\n\n  scan(fixturesRoot);\n  return testCases;\n}\n\n/**\n * Create a colored diff string for better test output\n */\nexport function createDiff(expected: string, actual: string): string {\n  const expectedLines = expected.split('\\n');\n  const actualLines = actual.split('\\n');\n  const maxLines = Math.max(expectedLines.length, actualLines.length);\n\n  let diff = '\\n';\n  diff += 'Expected vs Actual:\\n';\n  diff += '==================\\n';\n\n  for (let i = 0; i < maxLines; i++) {\n    const exp = expectedLines[i] ?? '';\n    const act = actualLines[i] ?? '';\n\n    if (exp !== act) {\n      diff += `Line ${i + 1}:\\n`;\n      diff += `  Expected: ${JSON.stringify(exp)}\\n`;\n      diff += `  Actual:   ${JSON.stringify(act)}\\n`;\n    }\n  }\n\n  return diff;\n}\n"],"version":3}