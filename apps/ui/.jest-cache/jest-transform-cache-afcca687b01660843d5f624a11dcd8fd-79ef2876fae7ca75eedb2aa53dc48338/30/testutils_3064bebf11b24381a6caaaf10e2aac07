d2079fa52b94733406a9ed41e7698dcd
"use strict";
/**
 * Test utilities for formatter tests
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.readFixture = readFixture;
exports.getTestCases = getTestCases;
exports.getAllTestCases = getAllTestCases;
exports.createDiff = createDiff;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
/**
 * Read a test fixture file
 */
function readFixture(fixturePath) {
    const fullPath = path.join(__dirname, 'fixtures', fixturePath);
    return fs.readFileSync(fullPath, 'utf-8');
}
/**
 * Get all test cases in a fixtures directory
 * Returns pairs of [inputPath, expectedPath]
 */
function getTestCases(fixturesDir) {
    const fullDir = path.join(__dirname, 'fixtures', fixturesDir);
    if (!fs.existsSync(fullDir)) {
        return [];
    }
    const files = fs.readdirSync(fullDir);
    const testCases = [];
    // Find all .scad files that don't end with .expected.scad
    const inputFiles = files.filter(f => f.endsWith('.scad') && !f.endsWith('.expected.scad'));
    for (const inputFile of inputFiles) {
        const baseName = inputFile.replace(/\.scad$/, '');
        const expectedFile = `${baseName}.expected.scad`;
        if (files.includes(expectedFile)) {
            const inputPath = path.join(fullDir, inputFile);
            const expectedPath = path.join(fullDir, expectedFile);
            testCases.push({
                name: `${fixturesDir}/${baseName}`,
                input: fs.readFileSync(inputPath, 'utf-8'),
                expected: fs.readFileSync(expectedPath, 'utf-8'),
            });
        }
    }
    return testCases;
}
/**
 * Get all test cases recursively from fixtures directory
 */
function getAllTestCases() {
    const fixturesRoot = path.join(__dirname, 'fixtures');
    if (!fs.existsSync(fixturesRoot)) {
        return [];
    }
    const testCases = [];
    function scan(dir, relativePath = '') {
        const entries = fs.readdirSync(dir, { withFileTypes: true });
        for (const entry of entries) {
            if (entry.isDirectory()) {
                scan(path.join(dir, entry.name), path.join(relativePath, entry.name));
            }
            else if (entry.isFile() && entry.name.endsWith('.scad') && !entry.name.endsWith('.expected.scad')) {
                const baseName = entry.name.replace(/\.scad$/, '');
                const expectedFile = `${baseName}.expected.scad`;
                const expectedPath = path.join(dir, expectedFile);
                if (fs.existsSync(expectedPath)) {
                    const inputPath = path.join(dir, entry.name);
                    const testName = path.join(relativePath, baseName);
                    testCases.push({
                        name: testName,
                        input: fs.readFileSync(inputPath, 'utf-8'),
                        expected: fs.readFileSync(expectedPath, 'utf-8'),
                    });
                }
            }
        }
    }
    scan(fixturesRoot);
    return testCases;
}
/**
 * Create a colored diff string for better test output
 */
function createDiff(expected, actual) {
    const expectedLines = expected.split('\n');
    const actualLines = actual.split('\n');
    const maxLines = Math.max(expectedLines.length, actualLines.length);
    let diff = '\n';
    diff += 'Expected vs Actual:\n';
    diff += '==================\n';
    for (let i = 0; i < maxLines; i++) {
        const exp = expectedLines[i] ?? '';
        const act = actualLines[i] ?? '';
        if (exp !== act) {
            diff += `Line ${i + 1}:\n`;
            diff += `  Expected: ${JSON.stringify(exp)}\n`;
            diff += `  Actual:   ${JSON.stringify(act)}\n`;
        }
    }
    return diff;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,