{"file":"/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/formatter/index.ts","mappings":";AAAA;;;;GAIG;;;AAsBH,sCAOC;AAKD,gDA+BC;AA/DD,qCAA6C;AAC7C,uCAAsC;AAQtC,MAAM,eAAe,GAA4B;IAC/C,UAAU,EAAE,CAAC;IACb,OAAO,EAAE,KAAK;IACd,UAAU,EAAE,EAAE;CACf,CAAC;AAEF,IAAI,aAAa,GAAG,KAAK,CAAC;AAE1B;;GAEG;AACI,KAAK,UAAU,aAAa;IACjC,IAAI,aAAa,EAAE,CAAC;QAClB,OAAO;IACT,CAAC;IAED,MAAM,IAAA,mBAAU,GAAE,CAAC;IACnB,aAAa,GAAG,IAAI,CAAC;AACvB,CAAC;AAED;;GAEG;AACI,KAAK,UAAU,kBAAkB,CACtC,IAAY,EACZ,UAAyB,EAAE;IAE3B,kCAAkC;IAClC,IAAI,CAAC,aAAa,EAAE,CAAC;QACnB,MAAM,aAAa,EAAE,CAAC;IACxB,CAAC;IAED,iBAAiB;IACjB,MAAM,IAAI,GAAG,IAAA,cAAK,EAAC,IAAI,CAAC,CAAC;IACzB,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,CAAC,IAAI,CAAC,+DAA+D,CAAC,CAAC;QAC9E,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,CAAC;QACH,8BAA8B;QAC9B,MAAM,IAAI,GAAG,EAAE,GAAG,eAAe,EAAE,GAAG,OAAO,EAAE,CAAC;QAEhD,2BAA2B;QAC3B,MAAM,SAAS,GAAG,IAAA,mBAAS,EAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAExC,OAAO,SAAS,CAAC;IACnB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,wCAAwC,EAAE,KAAK,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC,CAAC,gCAAgC;IAC/C,CAAC;YAAS,CAAC;QACT,oBAAoB;QACpB,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;AACH,CAAC;AAED,gCAAgC;AAChC,mCAA6C;AAApC,oGAAA,UAAU,OAAA;AAAE,+FAAA,KAAK,OAAA","names":[],"sources":["/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/formatter/index.ts"],"sourcesContent":["/**\n * OpenSCAD Code Formatter\n *\n * Tree-sitter based formatter for OpenSCAD code\n */\n\nimport { initParser, parse } from './parser';\nimport { printTree } from './printer';\n\nexport interface FormatOptions {\n  indentSize?: number;\n  useTabs?: boolean;\n  printWidth?: number;\n}\n\nconst DEFAULT_OPTIONS: Required<FormatOptions> = {\n  indentSize: 4,\n  useTabs: false,\n  printWidth: 80,\n};\n\nlet isInitialized = false;\n\n/**\n * Initialize the formatter (must be called once before formatting)\n */\nexport async function initFormatter(): Promise<void> {\n  if (isInitialized) {\n    return;\n  }\n\n  await initParser();\n  isInitialized = true;\n}\n\n/**\n * Format OpenSCAD code\n */\nexport async function formatOpenScadCode(\n  code: string,\n  options: FormatOptions = {}\n): Promise<string> {\n  // Ensure formatter is initialized\n  if (!isInitialized) {\n    await initFormatter();\n  }\n\n  // Parse the code\n  const tree = parse(code);\n  if (!tree) {\n    console.warn('[OpenSCAD Formatter] Failed to parse code, returning original');\n    return code;\n  }\n\n  try {\n    // Merge options with defaults\n    const opts = { ...DEFAULT_OPTIONS, ...options };\n\n    // Print the formatted code\n    const formatted = printTree(tree, opts);\n\n    return formatted;\n  } catch (error) {\n    console.error('[OpenSCAD Formatter] Formatting error:', error);\n    return code; // Return original code on error\n  } finally {\n    // Clean up the tree\n    tree.delete();\n  }\n}\n\n// Re-export types and utilities\nexport { initParser, parse } from './parser';\nexport type { Parser } from 'web-tree-sitter';\n"],"version":3}