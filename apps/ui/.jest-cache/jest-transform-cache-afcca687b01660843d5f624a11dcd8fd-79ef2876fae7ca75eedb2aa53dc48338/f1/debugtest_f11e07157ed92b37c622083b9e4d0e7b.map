{"file":"/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/formatter/__tests__/debug.test.ts","mappings":";AAAA;;GAEG;;AAEH,oCAA6D;AAE7D,2CAA2C;AAC3C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAEvB,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,IAAA,qBAAa,GAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,KAAK,GAAG;;;;;;EAMhB,CAAC;QAEC,MAAM,IAAI,GAAG,MAAM,IAAA,0BAAkB,EAAC,KAAK,CAAC,CAAC;QAC7C,MAAM,KAAK,GAAG,MAAM,IAAA,0BAAkB,EAAC,IAAI,CAAC,CAAC;QAE7C,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;QAC3C,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7C,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3C,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAE7C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACnC,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAErC,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;QACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;QAC/D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC;YAClC,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC;gBACnC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;gBACtC,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,EAAE,CAAC,CAAC;gBACvE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,EAAE,CAAC,CAAC;YAC1E,CAAC;QACH,CAAC;QAED,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/formatter/__tests__/debug.test.ts"],"sourcesContent":["/**\n * Debug test file - minimal test for quick iteration\n */\n\nimport { formatOpenScadCode, initFormatter } from '../index';\n\n// Increase timeout for WASM initialization\njest.setTimeout(30000);\n\ndescribe('Debug Formatter Tests', () => {\n  beforeAll(async () => {\n    await initFormatter();\n  });\n\n  it('should be idempotent - nested module in block', async () => {\n    const input = `module helpers() {\n    module line() color(\"Black\") cylinder(r=1, h=10, center=true);\n\n    scale(0.5) {\n        cube(10);\n    }\n}`;\n\n    const once = await formatOpenScadCode(input);\n    const twice = await formatOpenScadCode(once);\n\n    console.log('\\n=== IDEMPOTENCE DEBUG ===');\n    console.log('Input:', JSON.stringify(input));\n    console.log('Once:', JSON.stringify(once));\n    console.log('Twice:', JSON.stringify(twice));\n\n    const onceLines = once.split('\\n');\n    const twiceLines = twice.split('\\n');\n\n    console.log('\\n=== LINE COMPARISON ===');\n    const maxLines = Math.max(onceLines.length, twiceLines.length);\n    for (let i = 0; i < maxLines; i++) {\n      if (onceLines[i] !== twiceLines[i]) {\n        console.log(`Line ${i + 1} DIFFERS:`);\n        console.log(`  Once:  ${JSON.stringify(onceLines[i] || '(missing)')}`);\n        console.log(`  Twice: ${JSON.stringify(twiceLines[i] || '(missing)')}`);\n      }\n    }\n\n    expect(twice).toBe(once);\n  });\n});\n"],"version":3}