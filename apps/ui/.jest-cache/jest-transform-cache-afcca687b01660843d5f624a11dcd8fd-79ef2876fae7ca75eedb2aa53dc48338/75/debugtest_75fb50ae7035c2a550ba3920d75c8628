63b4b147cabba6e7507e67ea81d95cf4
"use strict";
/**
 * Debug test file - minimal test for quick iteration
 */
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
// Increase timeout for WASM initialization
jest.setTimeout(30000);
describe('Debug Formatter Tests', () => {
    beforeAll(async () => {
        await (0, index_1.initFormatter)();
    });
    it('should format simple comment and call', async () => {
        const input = `// Line 1 comment
// Line 2 comment
Logo(50);
`;
        const expected = `// Line 1 comment
// Line 2 comment
Logo(50);
`;
        const actual = await (0, index_1.formatOpenScadCode)(input);
        console.log('\n=== INPUT ===');
        console.log(JSON.stringify(input));
        console.log('\n=== EXPECTED ===');
        console.log(JSON.stringify(expected));
        console.log('\n=== ACTUAL ===');
        console.log(JSON.stringify(actual));
        console.log('\n=== LINE BY LINE ===');
        const inputLines = input.split('\n');
        const expectedLines = expected.split('\n');
        const actualLines = actual.split('\n');
        const maxLines = Math.max(inputLines.length, expectedLines.length, actualLines.length);
        for (let i = 0; i < maxLines; i++) {
            console.log(`Line ${i + 1}:`);
            console.log(`  Input:    ${JSON.stringify(inputLines[i] || '(missing)')}`);
            console.log(`  Expected: ${JSON.stringify(expectedLines[i] || '(missing)')}`);
            console.log(`  Actual:   ${JSON.stringify(actualLines[i] || '(missing)')}`);
            if (expectedLines[i] !== actualLines[i]) {
                console.log(`  ❌ MISMATCH`);
            }
        }
        expect(actual).toBe(expected);
    });
    it('should be idempotent', async () => {
        const input = `// Comment
Logo(50);
`;
        const once = await (0, index_1.formatOpenScadCode)(input);
        const twice = await (0, index_1.formatOpenScadCode)(once);
        console.log('\n=== IDEMPOTENCE CHECK ===');
        console.log('Formatted once:', JSON.stringify(once));
        console.log('Formatted twice:', JSON.stringify(twice));
        expect(twice).toBe(once);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3phY2hhcnltYXJpb24vc3JjL29wZW5zY2FkLXRhdXJpL2FwcHMvdWkvc3JjL3V0aWxzL2Zvcm1hdHRlci9fX3Rlc3RzX18vZGVidWcudGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsb0NBQTZEO0FBRTdELDJDQUEyQztBQUMzQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXZCLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7SUFDckMsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE1BQU0sSUFBQSxxQkFBYSxHQUFFLENBQUM7SUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsdUNBQXVDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDckQsTUFBTSxLQUFLLEdBQUc7OztDQUdqQixDQUFDO1FBRUUsTUFBTSxRQUFRLEdBQUc7OztDQUdwQixDQUFDO1FBRUUsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLDBCQUFrQixFQUFDLEtBQUssQ0FBQyxDQUFDO1FBRS9DLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRXBDLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUN0QyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkYsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzNFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDOUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM1RSxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM5QixDQUFDO1FBQ0gsQ0FBQztRQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsc0JBQXNCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDcEMsTUFBTSxLQUFLLEdBQUc7O0NBRWpCLENBQUM7UUFFRSxNQUFNLElBQUksR0FBRyxNQUFNLElBQUEsMEJBQWtCLEVBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFBLDBCQUFrQixFQUFDLElBQUksQ0FBQyxDQUFDO1FBRTdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyRCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUV2RCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3phY2hhcnltYXJpb24vc3JjL29wZW5zY2FkLXRhdXJpL2FwcHMvdWkvc3JjL3V0aWxzL2Zvcm1hdHRlci9fX3Rlc3RzX18vZGVidWcudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERlYnVnIHRlc3QgZmlsZSAtIG1pbmltYWwgdGVzdCBmb3IgcXVpY2sgaXRlcmF0aW9uXG4gKi9cblxuaW1wb3J0IHsgZm9ybWF0T3BlblNjYWRDb2RlLCBpbml0Rm9ybWF0dGVyIH0gZnJvbSAnLi4vaW5kZXgnO1xuXG4vLyBJbmNyZWFzZSB0aW1lb3V0IGZvciBXQVNNIGluaXRpYWxpemF0aW9uXG5qZXN0LnNldFRpbWVvdXQoMzAwMDApO1xuXG5kZXNjcmliZSgnRGVidWcgRm9ybWF0dGVyIFRlc3RzJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGluaXRGb3JtYXR0ZXIoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBmb3JtYXQgc2ltcGxlIGNvbW1lbnQgYW5kIGNhbGwnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBgLy8gTGluZSAxIGNvbW1lbnRcbi8vIExpbmUgMiBjb21tZW50XG5Mb2dvKDUwKTtcbmA7XG5cbiAgICBjb25zdCBleHBlY3RlZCA9IGAvLyBMaW5lIDEgY29tbWVudFxuLy8gTGluZSAyIGNvbW1lbnRcbkxvZ28oNTApO1xuYDtcblxuICAgIGNvbnN0IGFjdHVhbCA9IGF3YWl0IGZvcm1hdE9wZW5TY2FkQ29kZShpbnB1dCk7XG5cbiAgICBjb25zb2xlLmxvZygnXFxuPT09IElOUFVUID09PScpO1xuICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGlucHV0KSk7XG4gICAgY29uc29sZS5sb2coJ1xcbj09PSBFWFBFQ1RFRCA9PT0nKTtcbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShleHBlY3RlZCkpO1xuICAgIGNvbnNvbGUubG9nKCdcXG49PT0gQUNUVUFMID09PScpO1xuICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGFjdHVhbCkpO1xuXG4gICAgY29uc29sZS5sb2coJ1xcbj09PSBMSU5FIEJZIExJTkUgPT09Jyk7XG4gICAgY29uc3QgaW5wdXRMaW5lcyA9IGlucHV0LnNwbGl0KCdcXG4nKTtcbiAgICBjb25zdCBleHBlY3RlZExpbmVzID0gZXhwZWN0ZWQuc3BsaXQoJ1xcbicpO1xuICAgIGNvbnN0IGFjdHVhbExpbmVzID0gYWN0dWFsLnNwbGl0KCdcXG4nKTtcblxuICAgIGNvbnN0IG1heExpbmVzID0gTWF0aC5tYXgoaW5wdXRMaW5lcy5sZW5ndGgsIGV4cGVjdGVkTGluZXMubGVuZ3RoLCBhY3R1YWxMaW5lcy5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4TGluZXM7IGkrKykge1xuICAgICAgY29uc29sZS5sb2coYExpbmUgJHtpICsgMX06YCk7XG4gICAgICBjb25zb2xlLmxvZyhgICBJbnB1dDogICAgJHtKU09OLnN0cmluZ2lmeShpbnB1dExpbmVzW2ldIHx8ICcobWlzc2luZyknKX1gKTtcbiAgICAgIGNvbnNvbGUubG9nKGAgIEV4cGVjdGVkOiAke0pTT04uc3RyaW5naWZ5KGV4cGVjdGVkTGluZXNbaV0gfHwgJyhtaXNzaW5nKScpfWApO1xuICAgICAgY29uc29sZS5sb2coYCAgQWN0dWFsOiAgICR7SlNPTi5zdHJpbmdpZnkoYWN0dWFsTGluZXNbaV0gfHwgJyhtaXNzaW5nKScpfWApO1xuICAgICAgaWYgKGV4cGVjdGVkTGluZXNbaV0gIT09IGFjdHVhbExpbmVzW2ldKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGAgIOKdjCBNSVNNQVRDSGApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGV4cGVjdChhY3R1YWwpLnRvQmUoZXhwZWN0ZWQpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGlkZW1wb3RlbnQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBgLy8gQ29tbWVudFxuTG9nbyg1MCk7XG5gO1xuXG4gICAgY29uc3Qgb25jZSA9IGF3YWl0IGZvcm1hdE9wZW5TY2FkQ29kZShpbnB1dCk7XG4gICAgY29uc3QgdHdpY2UgPSBhd2FpdCBmb3JtYXRPcGVuU2NhZENvZGUob25jZSk7XG5cbiAgICBjb25zb2xlLmxvZygnXFxuPT09IElERU1QT1RFTkNFIENIRUNLID09PScpO1xuICAgIGNvbnNvbGUubG9nKCdGb3JtYXR0ZWQgb25jZTonLCBKU09OLnN0cmluZ2lmeShvbmNlKSk7XG4gICAgY29uc29sZS5sb2coJ0Zvcm1hdHRlZCB0d2ljZTonLCBKU09OLnN0cmluZ2lmeSh0d2ljZSkpO1xuXG4gICAgZXhwZWN0KHR3aWNlKS50b0JlKG9uY2UpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9