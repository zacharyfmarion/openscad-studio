{"file":"/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/formatter/__tests__/debug.test.ts","mappings":"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","names":[],"sources":["/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/formatter/__tests__/debug.test.ts"],"sourcesContent":["/**\n * Debug test file - minimal test for quick iteration\n */\n\nimport { formatOpenScadCode, initFormatter } from '../index';\n\n// Increase timeout for WASM initialization\njest.setTimeout(30000);\n\ndescribe('Debug Formatter Tests', () => {\n  beforeAll(async () => {\n    await initFormatter();\n  });\n\n  it('should format simple comment and call', async () => {\n    const input = `// Line 1 comment\n// Line 2 comment\nLogo(50);\n`;\n\n    const expected = `// Line 1 comment\n// Line 2 comment\nLogo(50);\n`;\n\n    const actual = await formatOpenScadCode(input);\n\n    console.log('\\n=== INPUT ===');\n    console.log(JSON.stringify(input));\n    console.log('\\n=== EXPECTED ===');\n    console.log(JSON.stringify(expected));\n    console.log('\\n=== ACTUAL ===');\n    console.log(JSON.stringify(actual));\n\n    console.log('\\n=== LINE BY LINE ===');\n    const inputLines = input.split('\\n');\n    const expectedLines = expected.split('\\n');\n    const actualLines = actual.split('\\n');\n\n    const maxLines = Math.max(inputLines.length, expectedLines.length, actualLines.length);\n    for (let i = 0; i < maxLines; i++) {\n      console.log(`Line ${i + 1}:`);\n      console.log(`  Input:    ${JSON.stringify(inputLines[i] || '(missing)')}`);\n      console.log(`  Expected: ${JSON.stringify(expectedLines[i] || '(missing)')}`);\n      console.log(`  Actual:   ${JSON.stringify(actualLines[i] || '(missing)')}`);\n      if (expectedLines[i] !== actualLines[i]) {\n        console.log(`  ❌ MISMATCH`);\n      }\n    }\n\n    expect(actual).toBe(expected);\n  });\n\n  it('should be idempotent', async () => {\n    const input = `// Comment\nLogo(50);\n`;\n\n    const once = await formatOpenScadCode(input);\n    const twice = await formatOpenScadCode(once);\n\n    console.log('\\n=== IDEMPOTENCE CHECK ===');\n    console.log('Formatted once:', JSON.stringify(once));\n    console.log('Formatted twice:', JSON.stringify(twice));\n\n    expect(twice).toBe(once);\n  });\n});\n"],"version":3}