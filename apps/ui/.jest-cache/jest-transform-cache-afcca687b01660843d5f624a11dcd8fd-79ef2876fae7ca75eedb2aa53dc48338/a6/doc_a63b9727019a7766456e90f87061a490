66f8b834f5060405bf6d1dc3080bc234
"use strict";
/**
 * Document IR (Intermediate Representation) for the pretty printer
 *
 * Based on Prettier's Doc format - provides primitives for building
 * formatted output with intelligent line breaking
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.concat = concat;
exports.line = line;
exports.hardline = hardline;
exports.softline = softline;
exports.group = group;
exports.indent = indent;
exports.ifBreak = ifBreak;
exports.fill = fill;
exports.join = join;
// Builders for Doc elements
function concat(parts) {
    return { type: 'concat', parts };
}
function line(opts = {}) {
    return { type: 'line', ...opts };
}
function hardline() {
    return line({ hard: true });
}
function softline() {
    return line({ soft: true });
}
function group(contents, shouldBreak = false) {
    return { type: 'group', contents, shouldBreak };
}
function indent(contents) {
    return { type: 'indent', contents };
}
function ifBreak(breakContents, flatContents = '') {
    return { type: 'if-break', breakContents, flatContents };
}
function fill(parts) {
    return { type: 'fill', parts };
}
// Utility functions
function join(sep, parts) {
    const result = [];
    for (let i = 0; i < parts.length; i++) {
        if (i > 0) {
            result.push(sep);
        }
        result.push(parts[i]);
    }
    return concat(result);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3phY2hhcnltYXJpb24vc3JjL29wZW5zY2FkLXRhdXJpL2FwcHMvdWkvc3JjL3V0aWxzL2Zvcm1hdHRlci9kb2MudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHOztBQWNILHdCQUVDO0FBRUQsb0JBRUM7QUFFRCw0QkFFQztBQUVELDRCQUVDO0FBRUQsc0JBRUM7QUFFRCx3QkFFQztBQUVELDBCQUVDO0FBRUQsb0JBRUM7QUFJRCxvQkFTQztBQTdDRCw0QkFBNEI7QUFFNUIsU0FBZ0IsTUFBTSxDQUFDLEtBQVk7SUFDakMsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFDbkMsQ0FBQztBQUVELFNBQWdCLElBQUksQ0FBQyxPQUEyQyxFQUFFO0lBQ2hFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUM7QUFDbkMsQ0FBQztBQUVELFNBQWdCLFFBQVE7SUFDdEIsT0FBTyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5QixDQUFDO0FBRUQsU0FBZ0IsUUFBUTtJQUN0QixPQUFPLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFFRCxTQUFnQixLQUFLLENBQUMsUUFBYSxFQUFFLFdBQVcsR0FBRyxLQUFLO0lBQ3RELE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsQ0FBQztBQUNsRCxDQUFDO0FBRUQsU0FBZ0IsTUFBTSxDQUFDLFFBQWE7SUFDbEMsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUM7QUFDdEMsQ0FBQztBQUVELFNBQWdCLE9BQU8sQ0FBQyxhQUFrQixFQUFFLGVBQW9CLEVBQUU7SUFDaEUsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxDQUFDO0FBQzNELENBQUM7QUFFRCxTQUFnQixJQUFJLENBQUMsS0FBWTtJQUMvQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUNqQyxDQUFDO0FBRUQsb0JBQW9CO0FBRXBCLFNBQWdCLElBQUksQ0FBQyxHQUFRLEVBQUUsS0FBWTtJQUN6QyxNQUFNLE1BQU0sR0FBVSxFQUFFLENBQUM7SUFDekIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUN0QyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUNELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hCLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3phY2hhcnltYXJpb24vc3JjL29wZW5zY2FkLXRhdXJpL2FwcHMvdWkvc3JjL3V0aWxzL2Zvcm1hdHRlci9kb2MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEb2N1bWVudCBJUiAoSW50ZXJtZWRpYXRlIFJlcHJlc2VudGF0aW9uKSBmb3IgdGhlIHByZXR0eSBwcmludGVyXG4gKlxuICogQmFzZWQgb24gUHJldHRpZXIncyBEb2MgZm9ybWF0IC0gcHJvdmlkZXMgcHJpbWl0aXZlcyBmb3IgYnVpbGRpbmdcbiAqIGZvcm1hdHRlZCBvdXRwdXQgd2l0aCBpbnRlbGxpZ2VudCBsaW5lIGJyZWFraW5nXG4gKi9cblxuZXhwb3J0IHR5cGUgRG9jID1cbiAgfCBzdHJpbmdcbiAgfCBEb2NbXVxuICB8IHsgdHlwZTogJ2NvbmNhdCc7IHBhcnRzOiBEb2NbXSB9XG4gIHwgeyB0eXBlOiAnbGluZSc7IGhhcmQ/OiBib29sZWFuOyBzb2Z0PzogYm9vbGVhbiB9XG4gIHwgeyB0eXBlOiAnZ3JvdXAnOyBjb250ZW50czogRG9jOyBzaG91bGRCcmVhaz86IGJvb2xlYW4gfVxuICB8IHsgdHlwZTogJ2luZGVudCc7IGNvbnRlbnRzOiBEb2MgfVxuICB8IHsgdHlwZTogJ2lmLWJyZWFrJzsgYnJlYWtDb250ZW50czogRG9jOyBmbGF0Q29udGVudHM6IERvYyB9XG4gIHwgeyB0eXBlOiAnZmlsbCc7IHBhcnRzOiBEb2NbXSB9O1xuXG4vLyBCdWlsZGVycyBmb3IgRG9jIGVsZW1lbnRzXG5cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQocGFydHM6IERvY1tdKTogRG9jIHtcbiAgcmV0dXJuIHsgdHlwZTogJ2NvbmNhdCcsIHBhcnRzIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lKG9wdHM6IHsgaGFyZD86IGJvb2xlYW47IHNvZnQ/OiBib29sZWFuIH0gPSB7fSk6IERvYyB7XG4gIHJldHVybiB7IHR5cGU6ICdsaW5lJywgLi4ub3B0cyB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFyZGxpbmUoKTogRG9jIHtcbiAgcmV0dXJuIGxpbmUoeyBoYXJkOiB0cnVlIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc29mdGxpbmUoKTogRG9jIHtcbiAgcmV0dXJuIGxpbmUoeyBzb2Z0OiB0cnVlIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JvdXAoY29udGVudHM6IERvYywgc2hvdWxkQnJlYWsgPSBmYWxzZSk6IERvYyB7XG4gIHJldHVybiB7IHR5cGU6ICdncm91cCcsIGNvbnRlbnRzLCBzaG91bGRCcmVhayB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5kZW50KGNvbnRlbnRzOiBEb2MpOiBEb2Mge1xuICByZXR1cm4geyB0eXBlOiAnaW5kZW50JywgY29udGVudHMgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlmQnJlYWsoYnJlYWtDb250ZW50czogRG9jLCBmbGF0Q29udGVudHM6IERvYyA9ICcnKTogRG9jIHtcbiAgcmV0dXJuIHsgdHlwZTogJ2lmLWJyZWFrJywgYnJlYWtDb250ZW50cywgZmxhdENvbnRlbnRzIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWxsKHBhcnRzOiBEb2NbXSk6IERvYyB7XG4gIHJldHVybiB7IHR5cGU6ICdmaWxsJywgcGFydHMgfTtcbn1cblxuLy8gVXRpbGl0eSBmdW5jdGlvbnNcblxuZXhwb3J0IGZ1bmN0aW9uIGpvaW4oc2VwOiBEb2MsIHBhcnRzOiBEb2NbXSk6IERvYyB7XG4gIGNvbnN0IHJlc3VsdDogRG9jW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpID4gMCkge1xuICAgICAgcmVzdWx0LnB1c2goc2VwKTtcbiAgICB9XG4gICAgcmVzdWx0LnB1c2gocGFydHNbaV0pO1xuICB9XG4gIHJldHVybiBjb25jYXQocmVzdWx0KTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==