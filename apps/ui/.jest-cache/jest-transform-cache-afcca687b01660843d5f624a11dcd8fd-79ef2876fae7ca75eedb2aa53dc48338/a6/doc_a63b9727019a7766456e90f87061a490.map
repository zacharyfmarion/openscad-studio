{"file":"/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/formatter/doc.ts","mappings":";AAAA;;;;;GAKG;;AAcH,wBAEC;AAED,oBAEC;AAED,4BAEC;AAED,4BAEC;AAED,sBAEC;AAED,wBAEC;AAED,0BAEC;AAED,oBAEC;AAID,oBASC;AA7CD,4BAA4B;AAE5B,SAAgB,MAAM,CAAC,KAAY;IACjC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;AACnC,CAAC;AAED,SAAgB,IAAI,CAAC,OAA2C,EAAE;IAChE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,IAAI,EAAE,CAAC;AACnC,CAAC;AAED,SAAgB,QAAQ;IACtB,OAAO,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9B,CAAC;AAED,SAAgB,QAAQ;IACtB,OAAO,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9B,CAAC;AAED,SAAgB,KAAK,CAAC,QAAa,EAAE,WAAW,GAAG,KAAK;IACtD,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC;AAClD,CAAC;AAED,SAAgB,MAAM,CAAC,QAAa;IAClC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;AACtC,CAAC;AAED,SAAgB,OAAO,CAAC,aAAkB,EAAE,eAAoB,EAAE;IAChE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,aAAa,EAAE,YAAY,EAAE,CAAC;AAC3D,CAAC;AAED,SAAgB,IAAI,CAAC,KAAY;IAC/B,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;AACjC,CAAC;AAED,oBAAoB;AAEpB,SAAgB,IAAI,CAAC,GAAQ,EAAE,KAAY;IACzC,MAAM,MAAM,GAAU,EAAE,CAAC;IACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACtC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;YACV,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC;IACD,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC;AACxB,CAAC","names":[],"sources":["/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/formatter/doc.ts"],"sourcesContent":["/**\n * Document IR (Intermediate Representation) for the pretty printer\n *\n * Based on Prettier's Doc format - provides primitives for building\n * formatted output with intelligent line breaking\n */\n\nexport type Doc =\n  | string\n  | Doc[]\n  | { type: 'concat'; parts: Doc[] }\n  | { type: 'line'; hard?: boolean; soft?: boolean }\n  | { type: 'group'; contents: Doc; shouldBreak?: boolean }\n  | { type: 'indent'; contents: Doc }\n  | { type: 'if-break'; breakContents: Doc; flatContents: Doc }\n  | { type: 'fill'; parts: Doc[] };\n\n// Builders for Doc elements\n\nexport function concat(parts: Doc[]): Doc {\n  return { type: 'concat', parts };\n}\n\nexport function line(opts: { hard?: boolean; soft?: boolean } = {}): Doc {\n  return { type: 'line', ...opts };\n}\n\nexport function hardline(): Doc {\n  return line({ hard: true });\n}\n\nexport function softline(): Doc {\n  return line({ soft: true });\n}\n\nexport function group(contents: Doc, shouldBreak = false): Doc {\n  return { type: 'group', contents, shouldBreak };\n}\n\nexport function indent(contents: Doc): Doc {\n  return { type: 'indent', contents };\n}\n\nexport function ifBreak(breakContents: Doc, flatContents: Doc = ''): Doc {\n  return { type: 'if-break', breakContents, flatContents };\n}\n\nexport function fill(parts: Doc[]): Doc {\n  return { type: 'fill', parts };\n}\n\n// Utility functions\n\nexport function join(sep: Doc, parts: Doc[]): Doc {\n  const result: Doc[] = [];\n  for (let i = 0; i < parts.length; i++) {\n    if (i > 0) {\n      result.push(sep);\n    }\n    result.push(parts[i]);\n  }\n  return concat(result);\n}\n"],"version":3}