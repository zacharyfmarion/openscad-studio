{"file":"/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/formatter/__tests__/formatter.test.ts","mappings":";AAAA;;GAEG;;AAEH,oCAA6D;AAC7D,6CAA2D;AAE3D,2CAA2C;AAC3C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAEvB,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,6CAA6C;IAC7C,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,IAAA,qBAAa,GAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,MAAM,SAAS,GAAG,IAAA,4BAAe,GAAE,CAAC;QAEpC,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC3B,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;YACpF,CAAC,CAAC,CAAC;QACL,CAAC;QAED,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE;YAC9C,QAAQ,CAAC,IAAI,EAAE,GAAG,EAAE;gBAClB,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;oBACvC,MAAM,MAAM,GAAG,MAAM,IAAA,0BAAkB,EAAC,KAAK,CAAC,CAAC;oBAE/C,IAAI,MAAM,KAAK,QAAQ,EAAE,CAAC;wBACxB,MAAM,IAAI,GAAG,IAAA,uBAAU,EAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;wBAC1C,MAAM,IAAI,KAAK,CAAC,2BAA2B,IAAI,MAAM,IAAI,EAAE,CAAC,CAAC;oBAC/D,CAAC;oBAED,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAChC,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;oBACpC,MAAM,aAAa,GAAG,MAAM,IAAA,0BAAkB,EAAC,KAAK,CAAC,CAAC;oBACtD,MAAM,cAAc,GAAG,MAAM,IAAA,0BAAkB,EAAC,aAAa,CAAC,CAAC;oBAE/D,IAAI,aAAa,KAAK,cAAc,EAAE,CAAC;wBACrC,MAAM,IAAI,GAAG,IAAA,uBAAU,EAAC,aAAa,EAAE,cAAc,CAAC,CAAC;wBACvD,MAAM,IAAI,KAAK,CAAC,mCAAmC,IAAI,MAAM,IAAI,EAAE,CAAC,CAAC;oBACvE,CAAC;oBAED,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC7C,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;YACzC,MAAM,MAAM,GAAG,MAAM,IAAA,0BAAkB,EAAC,EAAE,CAAC,CAAC;YAC5C,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,MAAM,GAAG,MAAM,IAAA,0BAAkB,EAAC,gBAAgB,CAAC,CAAC;YAC1D,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,OAAO,GAAG,6BAA6B,CAAC;YAC9C,MAAM,MAAM,GAAG,MAAM,IAAA,0BAAkB,EAAC,OAAO,CAAC,CAAC;YACjD,wCAAwC;YACxC,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;YACxC,MAAM,KAAK,GAAG,8BAA8B,CAAC;YAC7C,MAAM,MAAM,GAAG,MAAM,IAAA,0BAAkB,EAAC,KAAK,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,KAAK,GAAG,iBAAiB,CAAC;YAChC,MAAM,MAAM,GAAG,MAAM,IAAA,0BAAkB,EAAC,KAAK,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,KAAK,GAAG,iBAAiB,CAAC;YAChC,MAAM,MAAM,GAAG,MAAM,IAAA,0BAAkB,EAAC,KAAK,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,KAAK,GAAG,UAAU,CAAC;YACzB,MAAM,MAAM,GAAG,MAAM,IAAA,0BAAkB,EAAC,KAAK,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,KAAK,GAAG,OAAO,CAAC;YACtB,MAAM,MAAM,GAAG,MAAM,IAAA,0BAAkB,EAAC,KAAK,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,KAAK,GAAG,sBAAsB,CAAC;YACrC,MAAM,MAAM,GAAG,MAAM,IAAA,0BAAkB,EAAC,KAAK,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/formatter/__tests__/formatter.test.ts"],"sourcesContent":["/**\n * Formatter test suite using file-based fixtures\n */\n\nimport { formatOpenScadCode, initFormatter } from '../index';\nimport { getAllTestCases, createDiff } from './test-utils';\n\n// Increase timeout for WASM initialization\njest.setTimeout(30000);\n\ndescribe('OpenSCAD Formatter', () => {\n  // Initialize formatter once before all tests\n  beforeAll(async () => {\n    await initFormatter();\n  });\n\n  describe('Fixture Tests', () => {\n    const testCases = getAllTestCases();\n\n    if (testCases.length === 0) {\n      it('should have test fixtures', () => {\n        throw new Error('No test fixtures found. Add .scad files to __tests__/fixtures/');\n      });\n    }\n\n    testCases.forEach(({ name, input, expected }) => {\n      describe(name, () => {\n        it('should format correctly', async () => {\n          const actual = await formatOpenScadCode(input);\n\n          if (actual !== expected) {\n            const diff = createDiff(expected, actual);\n            throw new Error(`Formatting mismatch for ${name}:\\n${diff}`);\n          }\n\n          expect(actual).toBe(expected);\n        });\n\n        it('should be idempotent', async () => {\n          const formattedOnce = await formatOpenScadCode(input);\n          const formattedTwice = await formatOpenScadCode(formattedOnce);\n\n          if (formattedOnce !== formattedTwice) {\n            const diff = createDiff(formattedOnce, formattedTwice);\n            throw new Error(`Formatter is not idempotent for ${name}:\\n${diff}`);\n          }\n\n          expect(formattedTwice).toBe(formattedOnce);\n        });\n      });\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle empty input', async () => {\n      const result = await formatOpenScadCode('');\n      expect(result).toBe('');\n    });\n\n    it('should handle whitespace-only input', async () => {\n      const result = await formatOpenScadCode('   \\n\\n  \\n   ');\n      expect(result).toBe('');\n    });\n\n    it('should handle parse errors gracefully', async () => {\n      const invalid = 'module { { { invalid syntax';\n      const result = await formatOpenScadCode(invalid);\n      // Should return original on parse error\n      expect(result).toBeDefined();\n    });\n\n    it('should preserve comments', async () => {\n      const input = '// Comment\\nmodule test() {}';\n      const result = await formatOpenScadCode(input);\n      expect(result).toContain('// Comment');\n      expect(result).toContain('module test()');\n    });\n  });\n\n  describe('Basic Formatting Rules', () => {\n    it('should add space after for keyword', async () => {\n      const input = 'for(i=[0:10]){}';\n      const result = await formatOpenScadCode(input);\n      expect(result).toContain('for (i = [0 : 10])');\n    });\n\n    it('should add space after module keyword', async () => {\n      const input = 'module test(){}';\n      const result = await formatOpenScadCode(input);\n      expect(result).toContain('module test()');\n    });\n\n    it('should format binary operators with spaces', async () => {\n      const input = 'x=1+2*3;';\n      const result = await formatOpenScadCode(input);\n      expect(result).toContain('x = 1 + 2 * 3');\n    });\n\n    it('should not add space after unary minus', async () => {\n      const input = 'x=-1;';\n      const result = await formatOpenScadCode(input);\n      expect(result).toContain('x = -1');\n      expect(result).not.toContain('- 1');\n    });\n\n    it('should format single-line arrays compactly', async () => {\n      const input = 'cube([ 1 , 2 , 3 ]);';\n      const result = await formatOpenScadCode(input);\n      expect(result).toContain('[1, 2, 3]');\n      expect(result).not.toContain('[ 1');\n      expect(result).not.toContain('3 ]');\n    });\n  });\n});\n"],"version":3}