72b3b04f9c8ac14cf11b911e1003c44f
"use strict";
/**
 * Tree-sitter OpenSCAD Parser Wrapper
 *
 * Initializes and provides access to the tree-sitter OpenSCAD parser
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.initParser = initParser;
exports.parse = parse;
exports.getParser = getParser;
exports.getLanguage = getLanguage;
const TreeSitter = __importStar(require("web-tree-sitter"));
let parser = null;
let language = null;
let initPromise = null;
/**
 * Initialize the parser (call once at startup)
 */
async function initParser() {
    if (initPromise) {
        return initPromise;
    }
    initPromise = (async () => {
        try {
            // Detect if we're running in Node.js or browser
            const isNode = typeof process !== 'undefined' && process.versions?.node;
            if (isNode) {
                // Node.js environment (tests)
                const path = await Promise.resolve().then(() => __importStar(require('path')));
                // Initialize web-tree-sitter for Node
                await TreeSitter.Parser.init();
                // Load WASM from public directory in project root
                // Use __dirname-like resolution that works in both ESM and CommonJS
                const wasmPath = path.resolve(process.cwd(), 'public/tree-sitter-openscad.wasm');
                language = await TreeSitter.Language.load(wasmPath);
            }
            else {
                // Browser environment
                await TreeSitter.Parser.init({
                    locateFile(scriptName, scriptDirectory) {
                        // Return the public path for WASM files
                        return `/${scriptName}`;
                    },
                });
                // Load the OpenSCAD language grammar
                language = await TreeSitter.Language.load('/tree-sitter-openscad.wasm');
            }
            // Create parser instance
            parser = new TreeSitter.Parser();
            parser.setLanguage(language);
            console.log('[OpenSCAD Formatter] Parser initialized successfully');
        }
        catch (error) {
            console.error('[OpenSCAD Formatter] Failed to initialize parser:', error);
            throw error;
        }
    })();
    return initPromise;
}
/**
 * Parse OpenSCAD code and return the syntax tree
 */
function parse(code) {
    if (!parser) {
        console.error('[OpenSCAD Formatter] Parser not initialized. Call initParser() first.');
        return null;
    }
    try {
        return parser.parse(code);
    }
    catch (error) {
        console.error('[OpenSCAD Formatter] Parse error:', error);
        return null;
    }
}
/**
 * Get the parser instance (after initialization)
 */
function getParser() {
    return parser;
}
/**
 * Get the language instance (after initialization)
 */
function getLanguage() {
    return language;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3phY2hhcnltYXJpb24vc3JjL29wZW5zY2FkLXRhdXJpL2FwcHMvdWkvc3JjL3V0aWxzL2Zvcm1hdHRlci9wYXJzZXIudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBV0gsZ0NBOENDO0FBS0Qsc0JBWUM7QUFLRCw4QkFFQztBQUtELGtDQUVDO0FBdEZELDREQUE4QztBQUU5QyxJQUFJLE1BQU0sR0FBNkIsSUFBSSxDQUFDO0FBQzVDLElBQUksUUFBUSxHQUErQixJQUFJLENBQUM7QUFDaEQsSUFBSSxXQUFXLEdBQXlCLElBQUksQ0FBQztBQUU3Qzs7R0FFRztBQUNJLEtBQUssVUFBVSxVQUFVO0lBQzlCLElBQUksV0FBVyxFQUFFLENBQUM7UUFDaEIsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVELFdBQVcsR0FBRyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3hCLElBQUksQ0FBQztZQUNILGdEQUFnRDtZQUNoRCxNQUFNLE1BQU0sR0FBRyxPQUFPLE9BQU8sS0FBSyxXQUFXLElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUM7WUFFeEUsSUFBSSxNQUFNLEVBQUUsQ0FBQztnQkFDWCw4QkFBOEI7Z0JBQzlCLE1BQU0sSUFBSSxHQUFHLHdEQUFhLE1BQU0sR0FBQyxDQUFDO2dCQUVsQyxzQ0FBc0M7Z0JBQ3RDLE1BQU0sVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFFL0Isa0RBQWtEO2dCQUNsRCxvRUFBb0U7Z0JBQ3BFLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLGtDQUFrQyxDQUFDLENBQUM7Z0JBQ2pGLFFBQVEsR0FBRyxNQUFNLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3RELENBQUM7aUJBQU0sQ0FBQztnQkFDTixzQkFBc0I7Z0JBQ3RCLE1BQU0sVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7b0JBQzNCLFVBQVUsQ0FBQyxVQUFrQixFQUFFLGVBQXVCO3dCQUNwRCx3Q0FBd0M7d0JBQ3hDLE9BQU8sSUFBSSxVQUFVLEVBQUUsQ0FBQztvQkFDMUIsQ0FBQztpQkFDRixDQUFDLENBQUM7Z0JBRUgscUNBQXFDO2dCQUNyQyxRQUFRLEdBQUcsTUFBTSxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1lBQzFFLENBQUM7WUFFRCx5QkFBeUI7WUFDekIsTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO1FBQ3RFLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxtREFBbUQsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMxRSxNQUFNLEtBQUssQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRUwsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsS0FBSyxDQUFDLElBQVk7SUFDaEMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQyx1RUFBdUUsQ0FBQyxDQUFDO1FBQ3ZGLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELElBQUksQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDMUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsU0FBUztJQUN2QixPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixXQUFXO0lBQ3pCLE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3phY2hhcnltYXJpb24vc3JjL29wZW5zY2FkLXRhdXJpL2FwcHMvdWkvc3JjL3V0aWxzL2Zvcm1hdHRlci9wYXJzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUcmVlLXNpdHRlciBPcGVuU0NBRCBQYXJzZXIgV3JhcHBlclxuICpcbiAqIEluaXRpYWxpemVzIGFuZCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIHRyZWUtc2l0dGVyIE9wZW5TQ0FEIHBhcnNlclxuICovXG5cbmltcG9ydCAqIGFzIFRyZWVTaXR0ZXIgZnJvbSAnd2ViLXRyZWUtc2l0dGVyJztcblxubGV0IHBhcnNlcjogVHJlZVNpdHRlci5QYXJzZXIgfCBudWxsID0gbnVsbDtcbmxldCBsYW5ndWFnZTogVHJlZVNpdHRlci5MYW5ndWFnZSB8IG51bGwgPSBudWxsO1xubGV0IGluaXRQcm9taXNlOiBQcm9taXNlPHZvaWQ+IHwgbnVsbCA9IG51bGw7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgcGFyc2VyIChjYWxsIG9uY2UgYXQgc3RhcnR1cClcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRQYXJzZXIoKTogUHJvbWlzZTx2b2lkPiB7XG4gIGlmIChpbml0UHJvbWlzZSkge1xuICAgIHJldHVybiBpbml0UHJvbWlzZTtcbiAgfVxuXG4gIGluaXRQcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gRGV0ZWN0IGlmIHdlJ3JlIHJ1bm5pbmcgaW4gTm9kZS5qcyBvciBicm93c2VyXG4gICAgICBjb25zdCBpc05vZGUgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy52ZXJzaW9ucz8ubm9kZTtcblxuICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAvLyBOb2RlLmpzIGVudmlyb25tZW50ICh0ZXN0cylcbiAgICAgICAgY29uc3QgcGF0aCA9IGF3YWl0IGltcG9ydCgncGF0aCcpO1xuXG4gICAgICAgIC8vIEluaXRpYWxpemUgd2ViLXRyZWUtc2l0dGVyIGZvciBOb2RlXG4gICAgICAgIGF3YWl0IFRyZWVTaXR0ZXIuUGFyc2VyLmluaXQoKTtcblxuICAgICAgICAvLyBMb2FkIFdBU00gZnJvbSBwdWJsaWMgZGlyZWN0b3J5IGluIHByb2plY3Qgcm9vdFxuICAgICAgICAvLyBVc2UgX19kaXJuYW1lLWxpa2UgcmVzb2x1dGlvbiB0aGF0IHdvcmtzIGluIGJvdGggRVNNIGFuZCBDb21tb25KU1xuICAgICAgICBjb25zdCB3YXNtUGF0aCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAncHVibGljL3RyZWUtc2l0dGVyLW9wZW5zY2FkLndhc20nKTtcbiAgICAgICAgbGFuZ3VhZ2UgPSBhd2FpdCBUcmVlU2l0dGVyLkxhbmd1YWdlLmxvYWQod2FzbVBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBlbnZpcm9ubWVudFxuICAgICAgICBhd2FpdCBUcmVlU2l0dGVyLlBhcnNlci5pbml0KHtcbiAgICAgICAgICBsb2NhdGVGaWxlKHNjcmlwdE5hbWU6IHN0cmluZywgc2NyaXB0RGlyZWN0b3J5OiBzdHJpbmcpIHtcbiAgICAgICAgICAgIC8vIFJldHVybiB0aGUgcHVibGljIHBhdGggZm9yIFdBU00gZmlsZXNcbiAgICAgICAgICAgIHJldHVybiBgLyR7c2NyaXB0TmFtZX1gO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIExvYWQgdGhlIE9wZW5TQ0FEIGxhbmd1YWdlIGdyYW1tYXJcbiAgICAgICAgbGFuZ3VhZ2UgPSBhd2FpdCBUcmVlU2l0dGVyLkxhbmd1YWdlLmxvYWQoJy90cmVlLXNpdHRlci1vcGVuc2NhZC53YXNtJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZSBwYXJzZXIgaW5zdGFuY2VcbiAgICAgIHBhcnNlciA9IG5ldyBUcmVlU2l0dGVyLlBhcnNlcigpO1xuICAgICAgcGFyc2VyLnNldExhbmd1YWdlKGxhbmd1YWdlKTtcblxuICAgICAgY29uc29sZS5sb2coJ1tPcGVuU0NBRCBGb3JtYXR0ZXJdIFBhcnNlciBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHknKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignW09wZW5TQ0FEIEZvcm1hdHRlcl0gRmFpbGVkIHRvIGluaXRpYWxpemUgcGFyc2VyOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSkoKTtcblxuICByZXR1cm4gaW5pdFByb21pc2U7XG59XG5cbi8qKlxuICogUGFyc2UgT3BlblNDQUQgY29kZSBhbmQgcmV0dXJuIHRoZSBzeW50YXggdHJlZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoY29kZTogc3RyaW5nKTogVHJlZVNpdHRlci5UcmVlIHwgbnVsbCB7XG4gIGlmICghcGFyc2VyKSB7XG4gICAgY29uc29sZS5lcnJvcignW09wZW5TQ0FEIEZvcm1hdHRlcl0gUGFyc2VyIG5vdCBpbml0aWFsaXplZC4gQ2FsbCBpbml0UGFyc2VyKCkgZmlyc3QuJyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBwYXJzZXIucGFyc2UoY29kZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignW09wZW5TQ0FEIEZvcm1hdHRlcl0gUGFyc2UgZXJyb3I6JywgZXJyb3IpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSBwYXJzZXIgaW5zdGFuY2UgKGFmdGVyIGluaXRpYWxpemF0aW9uKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyc2VyKCk6IFRyZWVTaXR0ZXIuUGFyc2VyIHwgbnVsbCB7XG4gIHJldHVybiBwYXJzZXI7XG59XG5cbi8qKlxuICogR2V0IHRoZSBsYW5ndWFnZSBpbnN0YW5jZSAoYWZ0ZXIgaW5pdGlhbGl6YXRpb24pXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMYW5ndWFnZSgpOiBUcmVlU2l0dGVyLkxhbmd1YWdlIHwgbnVsbCB7XG4gIHJldHVybiBsYW5ndWFnZTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==