{"file":"/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/formatter/parser.ts","mappings":";AAAA;;;;GAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWH,gCA8CC;AAKD,sBAYC;AAKD,8BAEC;AAKD,kCAEC;AAtFD,4DAA8C;AAE9C,IAAI,MAAM,GAA6B,IAAI,CAAC;AAC5C,IAAI,QAAQ,GAA+B,IAAI,CAAC;AAChD,IAAI,WAAW,GAAyB,IAAI,CAAC;AAE7C;;GAEG;AACI,KAAK,UAAU,UAAU;IAC9B,IAAI,WAAW,EAAE,CAAC;QAChB,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,WAAW,GAAG,CAAC,KAAK,IAAI,EAAE;QACxB,IAAI,CAAC;YACH,gDAAgD;YAChD,MAAM,MAAM,GAAG,OAAO,OAAO,KAAK,WAAW,IAAI,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;YAExE,IAAI,MAAM,EAAE,CAAC;gBACX,8BAA8B;gBAC9B,MAAM,IAAI,GAAG,wDAAa,MAAM,GAAC,CAAC;gBAElC,sCAAsC;gBACtC,MAAM,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBAE/B,kDAAkD;gBAClD,oEAAoE;gBACpE,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,kCAAkC,CAAC,CAAC;gBACjF,QAAQ,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC;iBAAM,CAAC;gBACN,sBAAsB;gBACtB,MAAM,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC;oBAC3B,UAAU,CAAC,UAAkB,EAAE,eAAuB;wBACpD,wCAAwC;wBACxC,OAAO,IAAI,UAAU,EAAE,CAAC;oBAC1B,CAAC;iBACF,CAAC,CAAC;gBAEH,qCAAqC;gBACrC,QAAQ,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;YAC1E,CAAC;YAED,yBAAyB;YACzB,MAAM,GAAG,IAAI,UAAU,CAAC,MAAM,EAAE,CAAC;YACjC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAE7B,OAAO,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAC;QACtE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,mDAAmD,EAAE,KAAK,CAAC,CAAC;YAC1E,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC,CAAC,EAAE,CAAC;IAEL,OAAO,WAAW,CAAC;AACrB,CAAC;AAED;;GAEG;AACH,SAAgB,KAAK,CAAC,IAAY;IAChC,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO,CAAC,KAAK,CAAC,uEAAuE,CAAC,CAAC;QACvF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,CAAC;QACH,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,SAAS;IACvB,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;GAEG;AACH,SAAgB,WAAW;IACzB,OAAO,QAAQ,CAAC;AAClB,CAAC","names":[],"sources":["/Users/zacharymarion/src/openscad-tauri/apps/ui/src/utils/formatter/parser.ts"],"sourcesContent":["/**\n * Tree-sitter OpenSCAD Parser Wrapper\n *\n * Initializes and provides access to the tree-sitter OpenSCAD parser\n */\n\nimport * as TreeSitter from 'web-tree-sitter';\n\nlet parser: TreeSitter.Parser | null = null;\nlet language: TreeSitter.Language | null = null;\nlet initPromise: Promise<void> | null = null;\n\n/**\n * Initialize the parser (call once at startup)\n */\nexport async function initParser(): Promise<void> {\n  if (initPromise) {\n    return initPromise;\n  }\n\n  initPromise = (async () => {\n    try {\n      // Detect if we're running in Node.js or browser\n      const isNode = typeof process !== 'undefined' && process.versions?.node;\n\n      if (isNode) {\n        // Node.js environment (tests)\n        const path = await import('path');\n\n        // Initialize web-tree-sitter for Node\n        await TreeSitter.Parser.init();\n\n        // Load WASM from public directory in project root\n        // Use __dirname-like resolution that works in both ESM and CommonJS\n        const wasmPath = path.resolve(process.cwd(), 'public/tree-sitter-openscad.wasm');\n        language = await TreeSitter.Language.load(wasmPath);\n      } else {\n        // Browser environment\n        await TreeSitter.Parser.init({\n          locateFile(scriptName: string, scriptDirectory: string) {\n            // Return the public path for WASM files\n            return `/${scriptName}`;\n          },\n        });\n\n        // Load the OpenSCAD language grammar\n        language = await TreeSitter.Language.load('/tree-sitter-openscad.wasm');\n      }\n\n      // Create parser instance\n      parser = new TreeSitter.Parser();\n      parser.setLanguage(language);\n\n      console.log('[OpenSCAD Formatter] Parser initialized successfully');\n    } catch (error) {\n      console.error('[OpenSCAD Formatter] Failed to initialize parser:', error);\n      throw error;\n    }\n  })();\n\n  return initPromise;\n}\n\n/**\n * Parse OpenSCAD code and return the syntax tree\n */\nexport function parse(code: string): TreeSitter.Tree | null {\n  if (!parser) {\n    console.error('[OpenSCAD Formatter] Parser not initialized. Call initParser() first.');\n    return null;\n  }\n\n  try {\n    return parser.parse(code);\n  } catch (error) {\n    console.error('[OpenSCAD Formatter] Parse error:', error);\n    return null;\n  }\n}\n\n/**\n * Get the parser instance (after initialization)\n */\nexport function getParser(): TreeSitter.Parser | null {\n  return parser;\n}\n\n/**\n * Get the language instance (after initialization)\n */\nexport function getLanguage(): TreeSitter.Language | null {\n  return language;\n}\n"],"version":3}