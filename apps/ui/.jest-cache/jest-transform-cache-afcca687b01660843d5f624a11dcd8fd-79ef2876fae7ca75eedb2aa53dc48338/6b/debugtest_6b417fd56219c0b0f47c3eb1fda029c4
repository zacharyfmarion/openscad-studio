dd2ab1f20ecd88c94b815e3d4602cfc7
"use strict";
/**
 * Debug test file - minimal test for quick iteration
 */
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
// Increase timeout for WASM initialization
jest.setTimeout(30000);
describe('Debug Formatter Tests', () => {
    beforeAll(async () => {
        await (0, index_1.initFormatter)();
    });
    it('should be idempotent - CSG example', async () => {
        const input = `// Test
cube(10);
sphere(5);
// End`;
        const once = await (0, index_1.formatOpenScadCode)(input);
        const twice = await (0, index_1.formatOpenScadCode)(once);
        console.log('\n=== IDEMPOTENCE DEBUG ===');
        console.log('Input:', JSON.stringify(input));
        console.log('Once:', JSON.stringify(once));
        console.log('Twice:', JSON.stringify(twice));
        const onceLines = once.split('\n');
        const twiceLines = twice.split('\n');
        console.log('\n=== LINE COMPARISON ===');
        const maxLines = Math.max(onceLines.length, twiceLines.length);
        for (let i = 0; i < maxLines; i++) {
            if (onceLines[i] !== twiceLines[i]) {
                console.log(`Line ${i + 1} DIFFERS:`);
                console.log(`  Once:  ${JSON.stringify(onceLines[i] || '(missing)')}`);
                console.log(`  Twice: ${JSON.stringify(twiceLines[i] || '(missing)')}`);
            }
        }
        expect(twice).toBe(once);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3phY2hhcnltYXJpb24vc3JjL29wZW5zY2FkLXRhdXJpL2FwcHMvdWkvc3JjL3V0aWxzL2Zvcm1hdHRlci9fX3Rlc3RzX18vZGVidWcudGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsb0NBQTZEO0FBRTdELDJDQUEyQztBQUMzQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXZCLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7SUFDckMsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE1BQU0sSUFBQSxxQkFBYSxHQUFFLENBQUM7SUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsb0NBQW9DLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbEQsTUFBTSxLQUFLLEdBQUc7OztPQUdYLENBQUM7UUFFSixNQUFNLElBQUksR0FBRyxNQUFNLElBQUEsMEJBQWtCLEVBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFBLDBCQUFrQixFQUFDLElBQUksQ0FBQyxDQUFDO1FBRTdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUU3QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFckMsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2xDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3ZFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDMUUsQ0FBQztRQUNILENBQUM7UUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL3phY2hhcnltYXJpb24vc3JjL29wZW5zY2FkLXRhdXJpL2FwcHMvdWkvc3JjL3V0aWxzL2Zvcm1hdHRlci9fX3Rlc3RzX18vZGVidWcudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERlYnVnIHRlc3QgZmlsZSAtIG1pbmltYWwgdGVzdCBmb3IgcXVpY2sgaXRlcmF0aW9uXG4gKi9cblxuaW1wb3J0IHsgZm9ybWF0T3BlblNjYWRDb2RlLCBpbml0Rm9ybWF0dGVyIH0gZnJvbSAnLi4vaW5kZXgnO1xuXG4vLyBJbmNyZWFzZSB0aW1lb3V0IGZvciBXQVNNIGluaXRpYWxpemF0aW9uXG5qZXN0LnNldFRpbWVvdXQoMzAwMDApO1xuXG5kZXNjcmliZSgnRGVidWcgRm9ybWF0dGVyIFRlc3RzJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGluaXRGb3JtYXR0ZXIoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBpZGVtcG90ZW50IC0gQ1NHIGV4YW1wbGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBgLy8gVGVzdFxuY3ViZSgxMCk7XG5zcGhlcmUoNSk7XG4vLyBFbmRgO1xuXG4gICAgY29uc3Qgb25jZSA9IGF3YWl0IGZvcm1hdE9wZW5TY2FkQ29kZShpbnB1dCk7XG4gICAgY29uc3QgdHdpY2UgPSBhd2FpdCBmb3JtYXRPcGVuU2NhZENvZGUob25jZSk7XG5cbiAgICBjb25zb2xlLmxvZygnXFxuPT09IElERU1QT1RFTkNFIERFQlVHID09PScpO1xuICAgIGNvbnNvbGUubG9nKCdJbnB1dDonLCBKU09OLnN0cmluZ2lmeShpbnB1dCkpO1xuICAgIGNvbnNvbGUubG9nKCdPbmNlOicsIEpTT04uc3RyaW5naWZ5KG9uY2UpKTtcbiAgICBjb25zb2xlLmxvZygnVHdpY2U6JywgSlNPTi5zdHJpbmdpZnkodHdpY2UpKTtcblxuICAgIGNvbnN0IG9uY2VMaW5lcyA9IG9uY2Uuc3BsaXQoJ1xcbicpO1xuICAgIGNvbnN0IHR3aWNlTGluZXMgPSB0d2ljZS5zcGxpdCgnXFxuJyk7XG5cbiAgICBjb25zb2xlLmxvZygnXFxuPT09IExJTkUgQ09NUEFSSVNPTiA9PT0nKTtcbiAgICBjb25zdCBtYXhMaW5lcyA9IE1hdGgubWF4KG9uY2VMaW5lcy5sZW5ndGgsIHR3aWNlTGluZXMubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heExpbmVzOyBpKyspIHtcbiAgICAgIGlmIChvbmNlTGluZXNbaV0gIT09IHR3aWNlTGluZXNbaV0pIHtcbiAgICAgICAgY29uc29sZS5sb2coYExpbmUgJHtpICsgMX0gRElGRkVSUzpgKTtcbiAgICAgICAgY29uc29sZS5sb2coYCAgT25jZTogICR7SlNPTi5zdHJpbmdpZnkob25jZUxpbmVzW2ldIHx8ICcobWlzc2luZyknKX1gKTtcbiAgICAgICAgY29uc29sZS5sb2coYCAgVHdpY2U6ICR7SlNPTi5zdHJpbmdpZnkodHdpY2VMaW5lc1tpXSB8fCAnKG1pc3NpbmcpJyl9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXhwZWN0KHR3aWNlKS50b0JlKG9uY2UpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9